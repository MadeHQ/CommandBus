(function () {
  

  define('extend',[],function () {
    return function extend(out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        if (!arguments[i]) {
          continue;
        }

        // We need to handle arrays of options here too, for multi-tenant
        if (arguments[i].constructor === Array) {
          var options = [];
          for(var _x = 0; _x < arguments[i].length; _x++) {
            var _ref = arguments[i][_x];
            for (var _sub in _ref) {
              for (var _n in out) {
                if (!_ref[_sub].hasOwnProperty(_n)) {
                  _ref[_sub][_n] = out[_n];
                }
              }
            }

            options.push(_ref);
          }

          return options;
        } else {
          for (var key in arguments[i]) {
            if (arguments[i].hasOwnProperty(key)) {
              out[key] = arguments[i][key];
            }
          }
        }
      }

      return out;
    };
  });
})();

(function () {
  

  define('command-bus',[
    'extend'
  ], function (extend) {
    var CommandBus;

    CommandBus = (function () {
      function Bus() {
        this.options = null;
      }

      Bus.prototype.setOptions = function (options) {
        if (this.options === null) {
          this.options = {};
        }

        this.options = extend(this.options, options);
      };

      Bus.prototype.setHandlers = function (handlers) {
        this.setOptions({
          'handlers': handlers
        });
      };

      Bus.prototype.setGlobalDependencies = function (dependencies) {
        this.setOptions({
          'globalDependencies': dependencies
        });
      };

      Bus.prototype.getOption = function (key) {
        if (this.options.hasOwnProperty(key)) {
          return this.options[key];
        }
        throw new ReferenceError('Options ' + key + ' does not exist');
      };

      Bus.prototype.handle = function (command, callback) {
        var argv = {};
        var dependencies = {};
        if (command.constructor === Object) {
          command = command.name;
          argv = command.arguments || {};
        }

        if (this.getOption('handlers').hasOwnProperty(command)) {
          var handler = this.getOption('handlers')[command];

          try {
            dependencies = extend(this.getOption('globalDependencies'), handler.dependencies);
          } catch(e) {
            dependencies = handler.dependencies;
          }

          if (handler.handler.constructor === Function) {
            return handler.handler.apply(this, [
              dependencies,
              argv,
              callback
            ]);
          } else {
            return require([handler.handler], function (item) {
              return item.apply(this, [
                dependencies,
                argv,
                callback
              ]);
            });
          }
        }
      };

      return Bus;
    })();

    return CommandBus;
  });
})();

